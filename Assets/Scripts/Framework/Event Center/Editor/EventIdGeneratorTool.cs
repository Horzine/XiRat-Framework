using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace Xi.Framework.Editor
{
    public static class EventIdGeneratorTool
    {
        private const string kTemplatePath = "Assets/Scripts/Framework/Event Center/Editor/GenerateCustomEventIdTemplate.txt";
        private const string kOutputPath = "Assets/Scripts/Framework/Event Center/AutoGeneratedCustomEventId.cs";

        [MenuItem("Xi-Tool/Generate Custom Event Id")]
        public static void GenerateCustomEventId()
        {
            var baseType = typeof(CustomEvent);
            var eventTypes = new List<Type>();
            foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
            {
                foreach (var type in assembly.GetTypes())
                {
                    if (type.IsSubclassOf(baseType) && !type.IsAbstract)
                    {
                        eventTypes.Add(type);
                    }
                }
            }

            GenerateCodeFromTemplate(kTemplatePath, kOutputPath, eventTypes);

            Debug.Log($"[{nameof(EventIdGeneratorTool)}] <{nameof(GenerateCustomEventId)}> ===> Finish! Files at: {kOutputPath}");
        }

        private static void GenerateCodeFromTemplate(string templatePath, string outputPath, List<Type> eventTypes)
        {
            string templateContent = File.ReadAllText(templatePath);

            var enumItemsBuilder = new StringBuilder();
            var mapItemsBuilder = new StringBuilder();
            var preMap = CustomEventDefine.TypeNameMapEventId;
            int nextEventId = CustomEventDefine.nextEventId;
            foreach (var eventType in eventTypes)
            {
                string eventName = eventType.Name;
                string fullName = eventType.FullName;
                if (preMap.TryGetValue(fullName, out var enumValue))
                {
                    enumItemsBuilder.AppendLine($"            {eventName} = {(int)enumValue},");
                    mapItemsBuilder.AppendLine($"            {{ \"{fullName}\", EventId.{eventName} }},");
                }
                else
                {
                    enumItemsBuilder.AppendLine($"            {eventName} = {nextEventId},");
                    mapItemsBuilder.AppendLine($"            {{ \"{fullName}\", EventId.{eventName} }},");
                    nextEventId++;
                }
            }

            string enumItems = enumItemsBuilder.ToString().TrimEnd();
            string mapItems = mapItemsBuilder.ToString().TrimEnd();
            string outputContent = templateContent
                .Replace("%ENUM_ITEMS%", enumItems)
                .Replace("%NEXT_EVENT_ID%", nextEventId.ToString())
                .Replace("%MAP_ITEMS%", mapItems);

            File.WriteAllText(outputPath, outputContent);
        }
    }
}
